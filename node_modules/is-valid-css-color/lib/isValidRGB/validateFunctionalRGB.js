"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFunctionalRGB = void 0;
var parseRGB_1 = require("./parseRGB");
var validateFunctionalRGB = function (rgbString) {
    var _a, _b;
    var csvLength = rgbString.replace(/((rgba)|(rgb))|\(|\)|\s/g, '').split(',')
        .length;
    var isAlpha = rgbString.startsWith('rgba(');
    var isCSVLengthValid = csvLength === 3 || csvLength === 4;
    if (!rgbString.startsWith(isAlpha ? 'rgba(' : 'rgb(') ||
        !rgbString.endsWith(')') ||
        !isCSVLengthValid)
        return false;
    var parsedRGBA = parseRGB_1.parseRGB(rgbString);
    var red = parseFloat(parsedRGBA.red);
    var green = parseFloat(parsedRGBA.green);
    var blue = parseFloat(parsedRGBA.blue);
    var colorValuesStr = [parsedRGBA.red, parsedRGBA.green, parsedRGBA.blue];
    var areAllColorValuesInPercentage = colorValuesStr.every(function (c) {
        return c.endsWith('%');
    });
    var areAllColorValuesInNumber = colorValuesStr.every(
    // This line of code tests if the whole string is a valid number
    function (c) { var _a; return ((_a = c.match(/[0-9]|\./g)) === null || _a === void 0 ? void 0 : _a.length) === c.length; });
    if (!areAllColorValuesInNumber && !areAllColorValuesInPercentage)
        return false;
    if (areAllColorValuesInPercentage) {
        var isRedValid = !isNaN(red) && red >= 0 && red <= 100;
        var isGreenValid = !isNaN(green) && green >= 0 && green <= 100;
        var isBlueValid = !isNaN(blue) && blue >= 0 && blue <= 100;
        if (!isRedValid || !isGreenValid || !isBlueValid)
            return false;
    }
    else if (areAllColorValuesInNumber) {
        var isRedValid = !isNaN(red) && red >= 0 && red <= 255;
        var isGreenValid = !isNaN(green) && green >= 0 && green <= 255;
        var isBlueValid = !isNaN(blue) && blue >= 0 && blue <= 255;
        if (!isRedValid || !isGreenValid || !isBlueValid)
            return false;
    }
    else {
        return false;
    }
    if (isAlpha && parsedRGBA.alpha) {
        var alpha = parseFloat(parsedRGBA.alpha);
        if (isNaN(alpha))
            return false;
        if ((_a = parsedRGBA.alpha) === null || _a === void 0 ? void 0 : _a.endsWith('%')) {
            if (alpha < 0 || alpha > 100)
                return false;
        }
        if (!((_b = parsedRGBA.alpha) === null || _b === void 0 ? void 0 : _b.endsWith('%'))) {
            if (alpha > 1 || alpha < 0)
                return false;
        }
    }
    return true;
};
exports.validateFunctionalRGB = validateFunctionalRGB;
